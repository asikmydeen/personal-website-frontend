service: personal-website-backend

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    NODE_ENV: ${self:provider.stage}
    # For development, use a local value
    # For production, uncomment the SSM line and comment out the local value
    JWT_SECRET: ${env:JWT_SECRET, 'your_jwt_secret_for_development_only'}
    # JWT_SECRET: ${ssm:/personal-website/${self:provider.stage}/JWT_SECRET}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource:
        - !GetAtt PasswordResetTokensTable.Arn
        - !Sub "${PasswordResetTokensTable.Arn}/index/*"
        - !GetAtt AuthTokensTable.Arn
        - !Sub "${AuthTokensTable.Arn}/index/*"
        - !GetAtt UsersTable.Arn
        - !Sub "${UsersTable.Arn}/index/*"
        - !GetAtt NotesTable.Arn
        - !Sub "${NotesTable.Arn}/index/*"
        - !GetAtt BookmarksTable.Arn
        - !Sub "${BookmarksTable.Arn}/index/*"
        - !GetAtt BookmarkFoldersTable.Arn
        - !Sub "${BookmarkFoldersTable.Arn}/index/*"
        - !GetAtt PasswordsTable.Arn
        - !Sub "${PasswordsTable.Arn}/index/*"
        - !GetAtt WalletCardsTable.Arn
        - !Sub "${WalletCardsTable.Arn}/index/*"
        - !GetAtt VoiceMemosTable.Arn
        - !Sub "${VoiceMemosTable.Arn}/index/*"
        - !GetAtt FilesTable.Arn
        - !Sub "${FilesTable.Arn}/index/*"
        - !GetAtt FoldersTable.Arn
        - !Sub "${FoldersTable.Arn}/index/*"
        - !GetAtt PhotosTable.Arn
        - !Sub "${PhotosTable.Arn}/index/*"
        - !GetAtt AlbumsTable.Arn
        - !Sub "${AlbumsTable.Arn}/index/*"
        - !GetAtt ResumeTable.Arn
        - !Sub "${ResumeTable.Arn}/index/*"
        - !GetAtt SharingLinksTable.Arn
        - !Sub "${SharingLinksTable.Arn}/index/*"
        - !GetAtt UserPermissionsTable.Arn
        - !Sub "${UserPermissionsTable.Arn}/index/*"
        - !GetAtt CommentsTable.Arn
        - !Sub "${CommentsTable.Arn}/index/*"
        - !GetAtt NotificationsTable.Arn
        - !Sub "${NotificationsTable.Arn}/index/*"
        - !GetAtt TagsTable.Arn
        - !Sub "${TagsTable.Arn}/index/*"
        - !GetAtt ActivitiesTable.Arn
        - !Sub "${ActivitiesTable.Arn}/index/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource: !Join ['', ['arn:aws:s3:::', !Ref FilesBucket, '/*']]

plugins:
  - serverless-offline

package:
  individually: false
  exclude:
    - .git/**
    - .gitignore
    - .env
    - README.md
    - package-lock.json
  include:
    - src/handlers/**
    - src/controllers/**
    - src/services/**

functions:
  # Health check
  health:
    handler: src/handlers/health.handler
    events:
      - http:
          path: /health
          method: get
          cors: true

  # Auth functions
  login:
    handler: src/handlers/auth/login.handler
    events:
      - http:
          path: /api/v1/auth/login
          method: post
          cors: true
  
  register:
    handler: src/handlers/auth/register.handler
    events:
      - http:
          path: /api/v1/auth/register
          method: post
          cors: true
  
  logout:
    handler: src/handlers/auth/logout.handler
    events:
      - http:
          path: /api/v1/auth/logout
          method: post
          cors: true
  
  passwordReset:
    handler: src/handlers/auth/passwordReset.handler
    events:
      - http:
          path: /api/v1/auth/password-reset
          method: post
          cors: true
  
  passwordResetConfirm:
    handler: src/handlers/auth/passwordResetConfirm.handler
    events:
      - http:
          path: /api/v1/auth/password-reset/{token}
          method: post
          cors: true
  
  verifyToken:
    handler: src/handlers/auth/verifyToken.handler
    events:
      - http:
          path: /api/v1/auth/verify-token
          method: post
          cors: true
  
  # User functions
  getUserProfile:
    handler: src/handlers/users/getUserProfile.handler.handler
    events:
      - http:
          path: /api/v1/users/profile
          method: get
          cors: true
          authorizer: verifyToken
  
  updateUserProfile:
    handler: src/handlers/users/updateUserProfile.handler.handler
    events:
      - http:
          path: /api/v1/users/profile
          method: put
          cors: true
          authorizer: verifyToken
  
  getUserSettings:
    handler: src/handlers/users/getUserSettings.handler.handler
    events:
      - http:
          path: /api/v1/users/settings
          method: get
          cors: true
          authorizer: verifyToken
  
  updateUserSettings:
    handler: src/handlers/users/updateUserSettings.handler.handler
    events:
      - http:
          path: /api/v1/users/settings
          method: put
          cors: true
          authorizer: verifyToken
  
  # Notes functions
  createNote:
    handler: src/handlers/notes/createNote.handler.handler
    events:
      - http:
          path: /api/v1/notes
          method: post
          cors: true
          authorizer: verifyToken
  
  getNotes:
    handler: src/handlers/notes/getNotes.handler.handler
    events:
      - http:
          path: /api/v1/notes
          method: get
          cors: true
          authorizer: verifyToken
  
  getNote:
    handler: src/handlers/notes/getNote.handler.handler
    events:
      - http:
          path: /api/v1/notes/{id}
          method: get
          cors: true
          authorizer: verifyToken
  
  updateNote:
    handler: src/handlers/notes/updateNote.handler.handler
    events:
      - http:
          path: /api/v1/notes/{id}
          method: put
          cors: true
          authorizer: verifyToken
  
  deleteNote:
    handler: src/handlers/notes/deleteNote.handler.handler
    events:
      - http:
          path: /api/v1/notes/{id}
          method: delete
          cors: true
          authorizer: verifyToken
  
  permanentlyDeleteNote:
    handler: src/handlers/notes/permanentlyDeleteNote.handler.handler
    events:
      - http:
          path: /api/v1/notes/{id}/permanent
          method: delete
          cors: true
          authorizer: verifyToken
  
  restoreNote:
    handler: src/handlers/notes/restoreNote.handler.handler
    events:
      - http:
          path: /api/v1/notes/{id}/restore
          method: put
          cors: true
          authorizer: verifyToken
  
  searchNotes:
    handler: src/handlers/notes/searchNotes.handler.handler
    events:
      - http:
          path: /api/v1/notes/search
          method: get
          cors: true
          authorizer: verifyToken
  
  getNotesByTag:
    handler: src/handlers/notes/getNotesByTag.handler.handler
    events:
      - http:
          path: /api/v1/notes/tags
          method: get
          cors: true
          authorizer: verifyToken

  # Bookmarks functions
  # Similar patterns for other resources...

  # Activity functions
  getActivities:
    handler: src/handlers/activity/activityHandlers.handleGetActivities
    events:
      - http:
          path: /api/v1/activities
          method: get
          cors: true
          authorizer: verifyToken # Assuming activities are protected

  getActivityById:
    handler: src/handlers/activity/activityHandlers.handleGetActivityById
    events:
      - http:
          path: /api/v1/activities/{id}
          method: get
          cors: true
          authorizer: verifyToken # Assuming activities are protected

  createActivity:
    handler: src/handlers/activity/activityHandlers.handleCreateActivity
    events:
      - http:
          path: /api/v1/activities
          method: post
          cors: true
          authorizer: verifyToken # Assuming activities are protected

  updateActivity:
    handler: src/handlers/activity/activityHandlers.handleUpdateActivity
    events:
      - http:
          path: /api/v1/activities/{id}
          method: put
          cors: true
          authorizer: verifyToken # Assuming activities are protected

  deleteActivity:
    handler: src/handlers/activity/activityHandlers.handleDeleteActivity
    events:
      - http:
          path: /api/v1/activities/{id}
          method: delete
          cors: true
          authorizer: verifyToken # Assuming activities are protected

  # Album functions
  getAlbums:
    handler: src/handlers/album/albumHandlers.handleGetAlbums
    events:
      - http:
          path: /api/v1/albums
          method: get
          cors: true
          authorizer: verifyToken

  getAlbumById:
    handler: src/handlers/album/albumHandlers.handleGetAlbumById
    events:
      - http:
          path: /api/v1/albums/{id}
          method: get
          cors: true
          authorizer: verifyToken

  createAlbum:
    handler: src/handlers/album/albumHandlers.handleCreateAlbum
    events:
      - http:
          path: /api/v1/albums
          method: post
          cors: true
          authorizer: verifyToken

  updateAlbum:
    handler: src/handlers/album/albumHandlers.handleUpdateAlbum
    events:
      - http:
          path: /api/v1/albums/{id}
          method: put
          cors: true
          authorizer: verifyToken

  deleteAlbum:
    handler: src/handlers/album/albumHandlers.handleDeleteAlbum
    events:
      - http:
          path: /api/v1/albums/{id}
          method: delete
          cors: true
          authorizer: verifyToken

  # Bookmark functions
  getBookmarks:
    handler: src/handlers/bookmark/bookmarkHandlers.handleGetBookmarks
    events:
      - http:
          path: /api/v1/bookmarks
          method: get
          cors: true
          authorizer: verifyToken

  getBookmarkById:
    handler: src/handlers/bookmark/bookmarkHandlers.handleGetBookmarkById
    events:
      - http:
          path: /api/v1/bookmarks/{id}
          method: get
          cors: true
          authorizer: verifyToken

  createBookmark:
    handler: src/handlers/bookmark/bookmarkHandlers.handleCreateBookmark
    events:
      - http:
          path: /api/v1/bookmarks
          method: post
          cors: true
          authorizer: verifyToken

  updateBookmark:
    handler: src/handlers/bookmark/bookmarkHandlers.handleUpdateBookmark
    events:
      - http:
          path: /api/v1/bookmarks/{id}
          method: put
          cors: true
          authorizer: verifyToken

  deleteBookmark:
    handler: src/handlers/bookmark/bookmarkHandlers.handleDeleteBookmark
    events:
      - http:
          path: /api/v1/bookmarks/{id}
          method: delete
          cors: true
          authorizer: verifyToken

  # Bookmark Folder functions
  getBookmarkFolders:
    handler: src/handlers/bookmarkFolder/bookmarkFolderHandlers.handleGetBookmarkFolders
    events:
      - http:
          path: /api/v1/bookmark-folders
          method: get
          cors: true
          authorizer: verifyToken

  getBookmarkFolderById:
    handler: src/handlers/bookmarkFolder/bookmarkFolderHandlers.handleGetBookmarkFolderById
    events:
      - http:
          path: /api/v1/bookmark-folders/{id}
          method: get
          cors: true
          authorizer: verifyToken

  createBookmarkFolder:
    handler: src/handlers/bookmarkFolder/bookmarkFolderHandlers.handleCreateBookmarkFolder
    events:
      - http:
          path: /api/v1/bookmark-folders
          method: post
          cors: true
          authorizer: verifyToken

  updateBookmarkFolder:
    handler: src/handlers/bookmarkFolder/bookmarkFolderHandlers.handleUpdateBookmarkFolder
    events:
      - http:
          path: /api/v1/bookmark-folders/{id}
          method: put
          cors: true
          authorizer: verifyToken

  deleteBookmarkFolder:
    handler: src/handlers/bookmarkFolder/bookmarkFolderHandlers.handleDeleteBookmarkFolder
    events:
      - http:
          path: /api/v1/bookmark-folders/{id}
          method: delete
          cors: true
          authorizer: verifyToken

  # Password functions
  createPassword:
    handler: src/handlers/password/passwordHandlers.handleCreatePassword
    events:
      - http:
          path: /api/v1/passwords
          method: post
          cors: true
          authorizer: verifyToken
  
  getPasswords:
    handler: src/handlers/password/passwordHandlers.handleGetPasswords
    events:
      - http:
          path: /api/v1/passwords
          method: get
          cors: true
          authorizer: verifyToken
  
  getPasswordById:
    handler: src/handlers/password/passwordHandlers.handleGetPasswordById
    events:
      - http:
          path: /api/v1/passwords/{id}
          method: get
          cors: true
          authorizer: verifyToken
          
  updatePassword:
    handler: src/handlers/password/passwordHandlers.handleUpdatePassword
    events:
      - http:
          path: /api/v1/passwords/{id}
          method: put
          cors: true
          authorizer: verifyToken
          
  deletePassword:
    handler: src/handlers/password/passwordHandlers.handleDeletePassword
    events:
      - http:
          path: /api/v1/passwords/{id}
          method: delete
          cors: true
          authorizer: verifyToken
          
  searchPasswords:
    handler: src/handlers/password/passwordHandlers.handleSearchPasswords
    events:
      - http:
          path: /api/v1/passwords/search
          method: get
          cors: true
          authorizer: verifyToken
          
  getPasswordsByCategory:
    handler: src/handlers/password/passwordHandlers.handleGetPasswordsByCategory
    events:
      - http:
          path: /api/v1/passwords/category/{category}
          method: get
          cors: true
          authorizer: verifyToken

  # Wallet Card functions
  createWalletCard:
    handler: src/handlers/wallet/walletCardHandlers.handleCreateWalletCard
    events:
      - http:
          path: /api/v1/wallet/cards
          method: post
          cors: true
          authorizer: verifyToken
  
  getWalletCards:
    handler: src/handlers/wallet/walletCardHandlers.handleGetWalletCards
    events:
      - http:
          path: /api/v1/wallet/cards
          method: get
          cors: true
          authorizer: verifyToken
  
  getWalletCardById:
    handler: src/handlers/wallet/walletCardHandlers.handleGetWalletCardById
    events:
      - http:
          path: /api/v1/wallet/cards/{id}
          method: get
          cors: true
          authorizer: verifyToken
          
  updateWalletCard:
    handler: src/handlers/wallet/walletCardHandlers.handleUpdateWalletCard
    events:
      - http:
          path: /api/v1/wallet/cards/{id}
          method: put
          cors: true
          authorizer: verifyToken
          
  deleteWalletCard:
    handler: src/handlers/wallet/walletCardHandlers.handleDeleteWalletCard
    events:
      - http:
          path: /api/v1/wallet/cards/{id}
          method: delete
          cors: true
          authorizer: verifyToken

  # Voice Memo functions
  initiateVoiceMemoUpload:
    handler: src/handlers/voicememo/voiceMemoHandlers.handleInitiateVoiceMemoUpload
    events:
      - http:
          path: /api/v1/voice-memos/initiate-upload
          method: post
          cors: true
          authorizer: verifyToken

  finalizeVoiceMemoUpload:
    handler: src/handlers/voicememo/voiceMemoHandlers.handleFinalizeVoiceMemoUpload
    events:
      - http:
          path: /api/v1/voice-memos/{id}/finalize-upload
          method: post
          cors: true
          authorizer: verifyToken

  getVoiceMemos:
    handler: src/handlers/voicememo/voiceMemoHandlers.handleGetVoiceMemos
    events:
      - http:
          path: /api/v1/voice-memos
          method: get
          cors: true
          authorizer: verifyToken

  getVoiceMemoById:
    handler: src/handlers/voicememo/voiceMemoHandlers.handleGetVoiceMemoById
    events:
      - http:
          path: /api/v1/voice-memos/{id}
          method: get
          cors: true
          authorizer: verifyToken
          
  updateVoiceMemo:
    handler: src/handlers/voicememo/voiceMemoHandlers.handleUpdateVoiceMemo
    events:
      - http:
          path: /api/v1/voice-memos/{id}
          method: put
          cors: true
          authorizer: verifyToken
          
  deleteVoiceMemo:
    handler: src/handlers/voicememo/voiceMemoHandlers.handleDeleteVoiceMemo
    events:
      - http:
          path: /api/v1/voice-memos/{id}
          method: delete
          cors: true
          authorizer: verifyToken
          
  searchVoiceMemos:
    handler: src/handlers/voicememo/voiceMemoHandlers.handleSearchVoiceMemos
    events:
      - http:
          path: /api/v1/voice-memos/search
          method: get
          cors: true
          authorizer: verifyToken
          
  getVoiceMemosByTag:
    handler: src/handlers/voicememo/voiceMemoHandlers.handleGetVoiceMemosByTag
    events:
      - http:
          path: /api/v1/voice-memos/tags
          method: get
          cors: true
          authorizer: verifyToken

  # Folder functions
  createFolder:
    handler: src/handlers/folder/folderHandlers.handleCreateFolder
    events:
      - http:
          path: /api/v1/folders
          method: post
          cors: true
          authorizer: verifyToken
  
  getFolders:
    handler: src/handlers/folder/folderHandlers.handleGetFolders
    events:
      - http:
          path: /api/v1/folders
          method: get
          cors: true
          authorizer: verifyToken
  
  getFolderById:
    handler: src/handlers/folder/folderHandlers.handleGetFolderById
    events:
      - http:
          path: /api/v1/folders/{id}
          method: get
          cors: true
          authorizer: verifyToken
          
  updateFolder:
    handler: src/handlers/folder/folderHandlers.handleUpdateFolder
    events:
      - http:
          path: /api/v1/folders/{id}
          method: put
          cors: true
          authorizer: verifyToken
          
  deleteFolder:
    handler: src/handlers/folder/folderHandlers.handleDeleteFolder
    events:
      - http:
          path: /api/v1/folders/{id}
          method: delete
          cors: true
          authorizer: verifyToken
          
  getFilesInFolder:
    handler: src/handlers/folder/folderHandlers.handleGetFilesInFolder
    events:
      - http:
          path: /api/v1/folders/{id}/files
          method: get
          cors: true
          authorizer: verifyToken

  # File functions
  initiateFileUpload:
    handler: src/handlers/file/fileHandlers.handleInitiateFileUpload
    events:
      - http:
          path: /api/v1/files/initiate-upload
          method: post
          cors: true
          authorizer: verifyToken

  finalizeFileUpload:
    handler: src/handlers/file/fileHandlers.handleFinalizeFileUpload
    events:
      - http:
          path: /api/v1/files/{id}/finalize-upload
          method: post
          cors: true
          authorizer: verifyToken

  getFiles:
    handler: src/handlers/file/fileHandlers.handleGetFiles
    events:
      - http:
          path: /api/v1/files
          method: get
          cors: true
          authorizer: verifyToken

  getFileById:
    handler: src/handlers/file/fileHandlers.handleGetFileById
    events:
      - http:
          path: /api/v1/files/{id}
          method: get
          cors: true
          authorizer: verifyToken
          
  updateFile:
    handler: src/handlers/file/fileHandlers.handleUpdateFile
    events:
      - http:
          path: /api/v1/files/{id}
          method: put
          cors: true
          authorizer: verifyToken
          
  deleteFile:
    handler: src/handlers/file/fileHandlers.handleDeleteFile
    events:
      - http:
          path: /api/v1/files/{id}
          method: delete
          cors: true
          authorizer: verifyToken
          
  searchFiles:
    handler: src/handlers/file/fileHandlers.handleSearchFiles
    events:
      - http:
          path: /api/v1/files/search
          method: get
          cors: true
          authorizer: verifyToken
          
  getFilesByTag:
    handler: src/handlers/file/fileHandlers.handleGetFilesByTag
    events:
      - http:
          path: /api/v1/files/tags
          method: get
          cors: true
          authorizer: verifyToken

  # Photo functions
  initiatePhotoUpload:
    handler: src/handlers/photo/photoHandlers.handleInitiatePhotoUpload
    events:
      - http:
          path: /api/v1/photos/initiate-upload
          method: post
          cors: true
          authorizer: verifyToken

  finalizePhotoUpload:
    handler: src/handlers/photo/photoHandlers.handleFinalizePhotoUpload
    events:
      - http:
          path: /api/v1/photos/{id}/finalize-upload
          method: post
          cors: true
          authorizer: verifyToken

  getPhotos:
    handler: src/handlers/photo/photoHandlers.handleGetPhotos
    events:
      - http:
          path: /api/v1/photos
          method: get
          cors: true
          authorizer: verifyToken

  getPhotoById:
    handler: src/handlers/photo/photoHandlers.handleGetPhotoById
    events:
      - http:
          path: /api/v1/photos/{id}
          method: get
          cors: true
          authorizer: verifyToken
          
  updatePhoto:
    handler: src/handlers/photo/photoHandlers.handleUpdatePhoto
    events:
      - http:
          path: /api/v1/photos/{id}
          method: put
          cors: true
          authorizer: verifyToken
          
  deletePhoto:
    handler: src/handlers/photo/photoHandlers.handleDeletePhoto
    events:
      - http:
          path: /api/v1/photos/{id}
          method: delete
          cors: true
          authorizer: verifyToken
          
  searchPhotos:
    handler: src/handlers/photo/photoHandlers.handleSearchPhotos
    events:
      - http:
          path: /api/v1/photos/search
          method: get
          cors: true
          authorizer: verifyToken
          
  getPhotosByTag:
    handler: src/handlers/photo/photoHandlers.handleGetPhotosByTag
    events:
      - http:
          path: /api/v1/photos/tags
          method: get
          cors: true
          authorizer: verifyToken

  # Comment functions
  getComments:
    handler: src/handlers/comment/commentHandlers.handleGetComments
    events:
      - http:
          path: /api/v1/comments
          method: get
          cors: true
          authorizer: verifyToken

  getCommentById:
    handler: src/handlers/comment/commentHandlers.handleGetCommentById
    events:
      - http:
          path: /api/v1/comments/{id}
          method: get
          cors: true
          authorizer: verifyToken

  createComment:
    handler: src/handlers/comment/commentHandlers.handleCreateComment
    events:
      - http:
          path: /api/v1/comments
          method: post
          cors: true
          authorizer: verifyToken

  updateComment:
    handler: src/handlers/comment/commentHandlers.handleUpdateComment
    events:
      - http:
          path: /api/v1/comments/{id}
          method: put
          cors: true
          authorizer: verifyToken

  deleteComment:
    handler: src/handlers/comment/commentHandlers.handleDeleteComment
    events:
      - http:
          path: /api/v1/comments/{id}
          method: delete
          cors: true
          authorizer: verifyToken

resources:
  Resources:
    # DynamoDB Tables
    PasswordResetTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-passwordResetTokens
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: token-index
            KeySchema:
              - AttributeName: token
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    AuthTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-authTokens
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: token-index
            KeySchema:
              - AttributeName: token
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    BookmarksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-bookmarks
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    BookmarkFoldersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-bookmark-folders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    PasswordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-passwords
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    WalletCardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-wallet-cards
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    VoiceMemosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-voice-memos
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    FilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-files
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: folderId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: folderId-index
            KeySchema:
              - AttributeName: folderId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    FoldersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-folders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: parentFolderId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: parentFolderId-index
            KeySchema:
              - AttributeName: parentFolderId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    PhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-photos
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: albumId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: albumId-index
            KeySchema:
              - AttributeName: albumId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AlbumsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-albums
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ResumeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-resume
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    SharingLinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-sharing-links
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: token-index
            KeySchema:
              - AttributeName: token
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    UserPermissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-user-permissions
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: resourceOwnerId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: resourceOwnerId-index
            KeySchema:
              - AttributeName: resourceOwnerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-comments
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: resourceId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: resourceId-index
            KeySchema:
              - AttributeName: resourceId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-notifications
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    TagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-tags
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ActivitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-activities
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # S3 Buckets
    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-personal-website-files
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000

    # Cognito User Pool
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-personal-website-users
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-personal-website-client
        UserPoolId: !Ref UserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
